<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="dc/df8/_spellings_page_8xaml_8cs">
    <title>SpellingsPage.xaml.cs File Reference</title>
<para>Include dependency diagram for SpellingsPage.xaml.cs</para>
<para>
    <figure>
        <title>Dependency diagram</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="../../dc/d5d/_spellings_page_8xaml_8cs__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
<para>Included by dependency diagram for SpellingsPage.xaml.cs</para>
<para>
    <figure>
        <title>Dependency diagram</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="../../dc/db2/_spellings_page_8xaml_8cs__dep__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
        <section>
            <title> Classes </title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>struct <link linkend="d7/d40/class_app_store_1_1_templates_1_1_spellings_page">AppStore::Templates::SpellingsPage</link></para>
<para><emphasis>&lt;summary&gt;
This page deals with the Spellings Puzzle App-Template.</emphasis></para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <simplesect>
            <title> Namespaces </title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>struct <link linkend="d9/dab/namespace_app_store_1_1_templates">AppStore::Templates</link></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>struct <link linkend="d4/dad/namespace_windows_1_1_media_1_1_speech_synthesis">Windows::Media::SpeechSynthesis</link></para>
                    </listitem>
                </itemizedlist>
            </para>
        </simplesect>
    <simplesect>
        <title>Detailed Description</title>
    <para>Definition in file C:/Users/Srujan/Documents/Visual Studio 2015/Projects/BuildmLearnStore/AppStore/AppStore/Templates/SpellingsPage.xaml.cs</para>
    </simplesect>
    <literallayout><computeroutput>
1 <emphasis class="keyword">using</emphasis>&#32;<link linkend="d9/d6d/namespace_app_store">AppStore</link>.<link linkend="dd/d5e/namespace_app_store_1_1_common">Common</link>;
2 <emphasis class="keyword">using</emphasis>&#32;<link linkend="d8/dd0/namespace_system">System</link>;
3 <emphasis class="keyword">using</emphasis>&#32;<link linkend="d8/dd0/namespace_system">System</link>.Linq;
4 <emphasis class="keyword">using</emphasis>&#32;Windows.Media.SpeechSynthesis;
5 <emphasis class="keyword">using</emphasis>&#32;Windows.UI.Xaml;
6 <emphasis class="keyword">using</emphasis>&#32;Windows.UI.Xaml.Controls;
7 <emphasis class="keyword">using</emphasis>&#32;Windows.UI.Xaml.Navigation;
8 
9 <emphasis class="comment">//&#32;The&#32;Basic&#32;Page&#32;item&#32;template&#32;is&#32;documented&#32;at&#32;http://go.microsoft.com/fwlink/?LinkID=390556</emphasis>
10 
11 <emphasis class="keyword">namespace&#32;</emphasis><link linkend="d9/d6d/namespace_app_store">AppStore</link>.Templates
12 {
16 &#32;&#32;&#32;&#32;<emphasis class="keyword">public</emphasis>&#32;sealed&#32;<emphasis class="keyword">partial&#32;class&#32;</emphasis>SpellingsPage&#32;:&#32;<link linkend="db/d2f/class_page">Page</link>
17 &#32;&#32;&#32;&#32;{
18 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keyword">private</emphasis>&#32;<link linkend="d7/d68/class_app_store_1_1_common_1_1_navigation_helper">NavigationHelper</link>&#32;navigationHelper;
19 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keyword">private</emphasis>&#32;<link linkend="d2/db9/class_app_store_1_1_common_1_1_observable_dictionary">ObservableDictionary</link>&#32;defaultViewModel&#32;=&#32;<emphasis class="keyword">new</emphasis>&#32;<link linkend="d2/db9/class_app_store_1_1_common_1_1_observable_dictionary">ObservableDictionary</link>();
20 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keyword">private</emphasis>&#32;Models.SpellingsModel&#32;puzzle;
21 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
25 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keyword">public</emphasis>&#32;SpellingsPage()
26 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
27 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.InitializeComponent();
28 
29 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.navigationHelper&#32;=&#32;<emphasis class="keyword">new</emphasis>&#32;<link linkend="d7/d68/class_app_store_1_1_common_1_1_navigation_helper">NavigationHelper</link>(<emphasis class="keyword">this</emphasis>);
30 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.navigationHelper.LoadState&#32;+=&#32;this.NavigationHelper_LoadState;
31 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.navigationHelper.SaveState&#32;+=&#32;this.NavigationHelper_SaveState;
32 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
33 
37 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keyword">public</emphasis>&#32;<link linkend="d7/d68/class_app_store_1_1_common_1_1_navigation_helper">NavigationHelper</link>&#32;<link linkend="d7/d68/class_app_store_1_1_common_1_1_navigation_helper">NavigationHelper</link>
38 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
39 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keyword">get</emphasis>&#32;{&#32;<emphasis class="keywordflow">return</emphasis>&#32;this.navigationHelper;&#32;}
40 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
41 
46 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keyword">public</emphasis>&#32;<link linkend="d2/db9/class_app_store_1_1_common_1_1_observable_dictionary">ObservableDictionary</link>&#32;DefaultViewModel
47 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
48 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keyword">get</emphasis>&#32;{&#32;<emphasis class="keywordflow">return</emphasis>&#32;this.defaultViewModel;&#32;}
49 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
50 
62 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keyword">private</emphasis>&#32;<emphasis class="keywordtype">void</emphasis>&#32;NavigationHelper_LoadState(<emphasis class="keywordtype">object</emphasis>&#32;sender,&#32;<link linkend="d4/df7/class_app_store_1_1_common_1_1_load_state_event_args">LoadStateEventArgs</link>&#32;e)
63 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
64 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
65 
74 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keyword">private</emphasis>&#32;<emphasis class="keywordtype">void</emphasis>&#32;NavigationHelper_SaveState(<emphasis class="keywordtype">object</emphasis>&#32;sender,&#32;<link linkend="dd/d31/class_app_store_1_1_common_1_1_save_state_event_args">SaveStateEventArgs</link>&#32;e)
75 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
76 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
77 
78 <emphasis class="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#region&#32;NavigationHelper&#32;registration</emphasis>
79 
93 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keyword">protected</emphasis>&#32;<emphasis class="keyword">override</emphasis>&#32;<emphasis class="keywordtype">void</emphasis>&#32;OnNavigatedTo(NavigationEventArgs&#32;e)
94 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
95 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Frame.BackStack.RemoveAt(Frame.BackStackDepth&#32;-&#32;1);
96 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;puzzle&#32;=&#32;Models.SpellingsModel.getInstance();
97 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PuzzleNumber.Text&#32;=&#32;<emphasis class="stringliteral">&quot;Word&#32;#&quot;</emphasis>&#32;+&#32;(puzzle.getActiveCount()+1)&#32;+&#32;<emphasis class="stringliteral">&quot;&#32;out&#32;of&#32;&quot;</emphasis>&#32;+&#32;puzzle.getSpellingsList().<link linkend="d2/db9/class_app_store_1_1_common_1_1_observable_dictionary_1a96d3f837ef5ae640641e56f3009fe20d">Count</link>;
98 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pageTitle.Text&#32;=&#32;puzzle.getPuzzleName();
99 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(puzzle.getActiveCount()&#32;==&#32;puzzle.getSpellingsList().Count&#32;-&#32;1)&#32;Next.Content&#32;=&#32;<emphasis class="stringliteral">&quot;Submit&quot;</emphasis>;
100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Next.IsEnabled&#32;=&#32;<emphasis class="keyword">false</emphasis>;
101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Spell.IsEnabled&#32;=&#32;<emphasis class="keyword">false</emphasis>;
102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keyword">this</emphasis>.navigationHelper.OnNavigatedTo(e);
103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
104 
118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keyword">protected</emphasis>&#32;<emphasis class="keyword">override</emphasis>&#32;<emphasis class="keywordtype">void</emphasis>&#32;OnNavigatedFrom(NavigationEventArgs&#32;e)
119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.navigationHelper.OnNavigatedFrom(e);
121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
122 
123 <emphasis class="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endregion</emphasis>
124 
130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keyword">private</emphasis>&#32;<emphasis class="keywordtype">void</emphasis>&#32;Spell_Click(<emphasis class="keywordtype">object</emphasis>&#32;sender,&#32;RoutedEventArgs&#32;e)
131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Frame.Navigate(typeof(WordInfoPage));
133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
134 
140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keyword">private</emphasis>&#32;<emphasis class="keywordtype">void</emphasis>&#32;Next_Click(<emphasis class="keywordtype">object</emphasis>&#32;sender,&#32;RoutedEventArgs&#32;e)
141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(puzzle.getActiveCount()&#32;==&#32;puzzle.getSpellingsList().Count&#32;-&#32;1)
143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Frame.Navigate(typeof(ScorePage));
145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;puzzle.setActiveCount(puzzle.getActiveCount()&#32;+&#32;1);
147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PuzzleNumber.Text&#32;=&#32;<emphasis class="stringliteral">&quot;Word&#32;#&quot;</emphasis>&#32;+&#32;(puzzle.getActiveCount()&#32;+&#32;1)&#32;+&#32;<emphasis class="stringliteral">&quot;&#32;out&#32;of&#32;&quot;</emphasis>&#32;+&#32;puzzle.getSpellingsList().Count;
148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Next.IsEnabled&#32;=&#32;<emphasis class="keyword">false</emphasis>;&#32;Spell.IsEnabled&#32;=&#32;<emphasis class="keyword">false</emphasis>;
149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
150 
156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keyword">private</emphasis>&#32;async&#32;<emphasis class="keywordtype">void</emphasis>&#32;Listen_Click(<emphasis class="keywordtype">object</emphasis>&#32;sender,&#32;RoutedEventArgs&#32;e)
157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keyword">using</emphasis>&#32;(var&#32;speech&#32;=&#32;<emphasis class="keyword">new</emphasis>&#32;SpeechSynthesizer())
159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;((<emphasis class="keywordtype">bool</emphasis>)Female.IsChecked)&#32;speech.Voice&#32;=&#32;SpeechSynthesizer.AllVoices.First(i&#32;=&gt;&#32;i.Gender&#32;==&#32;VoiceGender.Female);
161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">else</emphasis>&#32;<emphasis class="keywordflow">if</emphasis>&#32;((<emphasis class="keywordtype">bool</emphasis>)Male.IsChecked)&#32;speech.Voice&#32;=&#32;SpeechSynthesizer.AllVoices.First(i&#32;=&gt;&#32;i.Gender&#32;==&#32;VoiceGender.Male);
162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;voiceStream&#32;=&#32;await&#32;speech.SynthesizeTextToStreamAsync(puzzle.getSpellingsList().ElementAt(puzzle.getActiveCount()).getWord());
163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;player.SetSource(voiceStream,&#32;voiceStream.ContentType);
164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;player.Play();
165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Next.IsEnabled&#32;=&#32;<emphasis class="keyword">true</emphasis>;&#32;Spell.IsEnabled&#32;=&#32;<emphasis class="keyword">true</emphasis>;
167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
168 &#32;&#32;&#32;&#32;}
169 }
    </computeroutput></literallayout>
</section>
