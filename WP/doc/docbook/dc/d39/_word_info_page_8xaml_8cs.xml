<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="dc/d39/_word_info_page_8xaml_8cs">
    <title>WordInfoPage.xaml.cs File Reference</title>
<para>Include dependency diagram for WordInfoPage.xaml.cs</para>
<para>
    <figure>
        <title>Dependency diagram</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="../../de/dab/_word_info_page_8xaml_8cs__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
<para>Included by dependency diagram for WordInfoPage.xaml.cs</para>
<para>
    <figure>
        <title>Dependency diagram</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="../../d3/dad/_word_info_page_8xaml_8cs__dep__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
        <section>
            <title> Classes </title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>struct <link linkend="dc/d66/class_app_store_1_1_templates_1_1_word_info_page">AppStore::Templates::WordInfoPage</link></para>
<para><emphasis>&lt;summary&gt;
The page deals with shwoing the word info based on the word which comes up while running the Spellings Puzzle app-template.</emphasis></para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <simplesect>
            <title> Namespaces </title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>struct <link linkend="d9/dab/namespace_app_store_1_1_templates">AppStore::Templates</link></para>
                    </listitem>
                </itemizedlist>
            </para>
        </simplesect>
    <simplesect>
        <title>Detailed Description</title>
    <para>Definition in file C:/Users/Srujan/Documents/Visual Studio 2015/Projects/BuildmLearnStore/AppStore/AppStore/Templates/WordInfoPage.xaml.cs</para>
    </simplesect>
    <literallayout><computeroutput>
1 <emphasis class="keyword">using</emphasis>&#32;<link linkend="d9/d6d/namespace_app_store">AppStore</link>.<link linkend="dd/d5e/namespace_app_store_1_1_common">Common</link>;
2 <emphasis class="keyword">using</emphasis>&#32;<link linkend="d8/dd0/namespace_system">System</link>;
3 <emphasis class="keyword">using</emphasis>&#32;<link linkend="d8/dd0/namespace_system">System</link>.Linq;
4 <emphasis class="keyword">using</emphasis>&#32;Windows.UI.Xaml;
5 <emphasis class="keyword">using</emphasis>&#32;Windows.UI.Xaml.Controls;
6 <emphasis class="keyword">using</emphasis>&#32;Windows.UI.Xaml.Navigation;
7 
8 <emphasis class="comment">//&#32;The&#32;Basic&#32;Page&#32;item&#32;template&#32;is&#32;documented&#32;at&#32;http://go.microsoft.com/fwlink/?LinkID=390556</emphasis>
9 
10 <emphasis class="keyword">namespace&#32;</emphasis><link linkend="d9/d6d/namespace_app_store">AppStore</link>.Templates
11 {
15 &#32;&#32;&#32;&#32;<emphasis class="keyword">public</emphasis>&#32;sealed&#32;<emphasis class="keyword">partial&#32;class&#32;</emphasis>WordInfoPage&#32;:&#32;<link linkend="db/d2f/class_page">Page</link>
16 &#32;&#32;&#32;&#32;{
17 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keyword">private</emphasis>&#32;<link linkend="d7/d68/class_app_store_1_1_common_1_1_navigation_helper">NavigationHelper</link>&#32;navigationHelper;
18 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keyword">private</emphasis>&#32;<link linkend="d2/db9/class_app_store_1_1_common_1_1_observable_dictionary">ObservableDictionary</link>&#32;defaultViewModel&#32;=&#32;<emphasis class="keyword">new</emphasis>&#32;<link linkend="d2/db9/class_app_store_1_1_common_1_1_observable_dictionary">ObservableDictionary</link>();
19 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Models.SpellingsModel&#32;puzzle;
20 
24 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keyword">public</emphasis>&#32;WordInfoPage()
25 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
26 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.InitializeComponent();
27 
28 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.navigationHelper&#32;=&#32;<emphasis class="keyword">new</emphasis>&#32;<link linkend="d7/d68/class_app_store_1_1_common_1_1_navigation_helper">NavigationHelper</link>(<emphasis class="keyword">this</emphasis>);
29 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.navigationHelper.LoadState&#32;+=&#32;this.NavigationHelper_LoadState;
30 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.navigationHelper.SaveState&#32;+=&#32;this.NavigationHelper_SaveState;
31 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
32 
36 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keyword">public</emphasis>&#32;<link linkend="d7/d68/class_app_store_1_1_common_1_1_navigation_helper">NavigationHelper</link>&#32;<link linkend="d7/d68/class_app_store_1_1_common_1_1_navigation_helper">NavigationHelper</link>
37 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
38 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keyword">get</emphasis>&#32;{&#32;<emphasis class="keywordflow">return</emphasis>&#32;this.navigationHelper;&#32;}
39 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
40 
45 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keyword">public</emphasis>&#32;<link linkend="d2/db9/class_app_store_1_1_common_1_1_observable_dictionary">ObservableDictionary</link>&#32;DefaultViewModel
46 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
47 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keyword">get</emphasis>&#32;{&#32;<emphasis class="keywordflow">return</emphasis>&#32;this.defaultViewModel;&#32;}
48 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
49 
61 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keyword">private</emphasis>&#32;<emphasis class="keywordtype">void</emphasis>&#32;NavigationHelper_LoadState(<emphasis class="keywordtype">object</emphasis>&#32;sender,&#32;<link linkend="d4/df7/class_app_store_1_1_common_1_1_load_state_event_args">LoadStateEventArgs</link>&#32;e)
62 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
63 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
64 
73 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keyword">private</emphasis>&#32;<emphasis class="keywordtype">void</emphasis>&#32;NavigationHelper_SaveState(<emphasis class="keywordtype">object</emphasis>&#32;sender,&#32;<link linkend="dd/d31/class_app_store_1_1_common_1_1_save_state_event_args">SaveStateEventArgs</link>&#32;e)
74 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
75 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
76 
77 <emphasis class="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#region&#32;NavigationHelper&#32;registration</emphasis>
78 
92 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keyword">protected</emphasis>&#32;<emphasis class="keyword">override</emphasis>&#32;<emphasis class="keywordtype">void</emphasis>&#32;OnNavigatedTo(NavigationEventArgs&#32;e)
93 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
94 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;puzzle&#32;=&#32;Models.SpellingsModel.getInstance();
95 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PuzzleNumber.Text&#32;=&#32;<emphasis class="stringliteral">&quot;Word&#32;#&quot;</emphasis>&#32;+&#32;(puzzle.getActiveCount()+1)&#32;+&#32;<emphasis class="stringliteral">&quot;&#32;out&#32;of&#32;&quot;</emphasis>&#32;+&#32;puzzle.getSpellingsList().<link linkend="d2/db9/class_app_store_1_1_common_1_1_observable_dictionary_1a96d3f837ef5ae640641e56f3009fe20d">Count</link>;
96 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;((puzzle.getActiveCount()&#32;+&#32;1)&#32;==&#32;puzzle.getSpellingsList().Count)&#32;Next.Content&#32;=&#32;<emphasis class="stringliteral">&quot;Submit&quot;</emphasis>;
97 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pageTitle.Text&#32;=&#32;puzzle.getPuzzleName();
98 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;OriginalWord.Text&#32;=&#32;<emphasis class="stringliteral">&quot;Word:&#32;&quot;</emphasis>+&#32;puzzle.getSpellingsList().ElementAt(puzzle.getActiveCount()).getWord();
99 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;WordDescription.Text&#32;=&#32;<emphasis class="stringliteral">&quot;Meaning:&#32;&quot;</emphasis>+&#32;puzzle.getSpellingsList().ElementAt(puzzle.getActiveCount()).getDescription();
100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.navigationHelper.OnNavigatedTo(e);
101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
102 
116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keyword">protected</emphasis>&#32;<emphasis class="keyword">override</emphasis>&#32;<emphasis class="keywordtype">void</emphasis>&#32;OnNavigatedFrom(NavigationEventArgs&#32;e)
117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Answer.Visibility&#32;=&#32;Visibility.Collapsed;
119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.navigationHelper.OnNavigatedFrom(e);
120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
121 
122 <emphasis class="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endregion</emphasis>
123 
129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keyword">private</emphasis>&#32;<emphasis class="keywordtype">void</emphasis>&#32;Back_Click(<emphasis class="keywordtype">object</emphasis>&#32;sender,&#32;RoutedEventArgs&#32;e)
130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Frame.GoBack();
132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
133 
139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keyword">private</emphasis>&#32;<emphasis class="keywordtype">void</emphasis>&#32;Enter_Click(<emphasis class="keywordtype">object</emphasis>&#32;sender,&#32;RoutedEventArgs&#32;e)
140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Enter.IsEnabled&#32;=&#32;<emphasis class="keyword">false</emphasis>;
142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Back.IsEnabled&#32;=&#32;<emphasis class="keyword">false</emphasis>;
143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Answer.Visibility&#32;=&#32;Visibility.Visible;
144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">string</emphasis>&#32;yourWord&#32;=&#32;Word.Text;
145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">string</emphasis>&#32;originalWord&#32;=&#32;puzzle.getSpellingsList().ElementAt(puzzle.getActiveCount()).getWord();
146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(<emphasis class="keywordtype">string</emphasis>.Equals(yourWord,originalWord,&#32;StringComparison.OrdinalIgnoreCase))
147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;puzzle.setTotalCorrect(puzzle.getTotalCorrect()&#32;+&#32;1);
149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Response.Text&#32;=&#32;<emphasis class="stringliteral">&quot;You&#32;got&#32;the&#32;right&#32;word&#32;!&quot;</emphasis>;
150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;puzzle.setTotalWrong(puzzle.getTotalWrong()&#32;+&#32;1);
153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Response.Text&#32;=&#32;<emphasis class="stringliteral">&quot;Sorry,&#32;the&#32;word&#32;you&#32;entered&#32;is&#32;wrong!&quot;</emphasis>;
154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
156 
162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keyword">private</emphasis>&#32;<emphasis class="keywordtype">void</emphasis>&#32;Next_Click(<emphasis class="keywordtype">object</emphasis>&#32;sender,&#32;RoutedEventArgs&#32;e)
163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(puzzle.getActiveCount()&#32;+&#32;1&#32;==&#32;puzzle.getSpellingsList().Count)&#32;Frame.Navigate(typeof(ScorePage));
165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;puzzle.setActiveCount(puzzle.getActiveCount()&#32;+&#32;1);
166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Frame.GoBack();
167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
168 
174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keyword">private</emphasis>&#32;<emphasis class="keywordtype">void</emphasis>&#32;Word_TextChanged(<emphasis class="keywordtype">object</emphasis>&#32;sender,&#32;TextChangedEventArgs&#32;e)
175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Enter.IsEnabled&#32;=&#32;<emphasis class="keyword">true</emphasis>;
177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
178 &#32;&#32;&#32;&#32;}
179 }
    </computeroutput></literallayout>
</section>
